# -*-indent-tabs-mode:nil;c-basic-offset:2;tab-width:4;-*-
# Copyright 2020-2022 Alfredo A. Correa

image: debian:testing

variables:
  OMP_NUM_THREADS: 1
  GIT_SUBMODULE_STRATEGY: recursive
  CODECOV_TOKEN: "999feb5b-a599-4d02-b9c5-46d977247f3a"

OLDG++SANICHECKCOV:
  stage: build
  image: debian:stable-backports  # for g++-9
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet cmake cppcheck curl gcovr g++-9 make lcov libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config wget
    - mkdir build && cd build
    - CXX=g++-9 cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--inline-suppr;--std=c++17;--check-config;--error-exitcode=1" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1 -fsanitize=address,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-sanitize-recover=all --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_EXE_LINKER_FLAGS="-lgcov --coverage"
    - make --jobs=2 || make VERBOSE=1
    - ASAN_OPTIONS="new_delete_type_mismatch=0:check_initialization_order=true:strict_init_order=true:detect_stack_use_after_return=true:detect_odr_violation=1" ctest -j 2 --output-on-failure -T Test
    - wget https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    - ./codecov -t ${CODECOV_TOKEN}
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
    - lcov --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info
    - lcov --list coverage.info && genhtml coverage.info 
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

NEWG++12STD20MEMCHK:
  stage: build
  image: debian:testing  # for g++-12
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++-12 pkg-config cmake make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev valgrind
    - mkdir build && cd build
    - CXX=g++-12 cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_FLAGS="-fanalyzer -Wno-analyzer-null-dereference -Wno-analyzer-possible-null-dereference -Wno-analyzer-malloc-leak -Wno-analyzer-use-of-uninitialized-value -Wno-analyzer-use-after-free"
    - make --jobs=2  || make VERBOSE=1
    - ctest -j 2 --output-on-failure --overwrite MemoryCheckCommandOptions="-q --tool=memcheck --leak-check=yes --num-callers=51 --trace-children=yes --leak-check=full --track-origins=yes --gen-suppressions=all" -T memcheck
  needs: ["OLDG++SANICHECKCOV"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

OLDCLANG++12TIDYSANI:
  stage: build
  image: debian:stable-backports
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet cmake clang clang-tidy make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CLANG_TIDY="clang-tidy" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1 -D_LIBCPP_DEBUG=1 -fsanitize=address,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-sanitize-recover=all"
    - make --jobs=2 || make VERBOSE=1
    - ASAN_OPTIONS="new_delete_type_mismatch=0:check_initialization_order=true:strict_init_order=true:detect_stack_use_after_return=true:detect_odr_violation=1" ctest -j 2 --output-on-failure
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

NEWCLANG++12STD20LINT:
  stage: build
  image: debian:testing
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet cmake clang make libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config cpplint
    - cpplint --recursive include/multi/array.hpp
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++-14 cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_CPPLINT="cpplint;--quiet"
    - make --jobs=2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["OLDCLANG++12TIDYSANI"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# install intel compiler online
#  image: debian:stable  # icpc 2022.1.2 is incompatible with gcc 12 lib
#  script:
#    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl g++ libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
#    - curl --output webimage.sh --url https://registrationcenter-download.intel.com/akdlm/irc_nas/18487/l_BaseKit_p_2022.1.2.146_offline.sh --retry 5 --retry-delay 5
#    - chmod +x webimage.sh
#    - ./webimage.sh -x -f webimage_extracted --log extract.log
#    - rm -rf webimage.sh
#    - ls -1 webimage_extracted/
#    - WEBIMAGE_NAME=$(ls -1 webimage_extracted/)
#    - webimage_extracted/"$WEBIMAGE_NAME"/bootstrapper -s --action install --components=`#intel.oneapi.lin.mkl.devel:`intel.oneapi.lin.dpcpp-cpp-compiler:intel.oneapi.lin.dpl --eula=accept --log-dir=.
#    - rm -rf webimage_extracted
#    - . /opt/intel/oneapi/setvars.sh

ICPX:
  stage: build
  image: intel/oneapi-hpckit:latest
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates cmake curl g++ libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
    - mkdir build && cd build
    - icpx --version
    - CXX=icpx cmake .. -DCMAKE_BUILD_TYPE=Release
    - make --jobs=2 || make VERBOSE=1
    - ctest --parallel 2 --output-on-failure
  needs: ["OLDG++SANICHECKCOV"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

#ICPC:
#  stage: build
#  image: intel/oneapi-hpckit:latest
#  script:
#    - apt-get update && apt-get install --no-install-recommends -y --quiet cmake g++ libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev liblapack-dev libfftw3-dev make pkg-config
#    - mkdir build && cd build
#    - icpc --version
#    - CXX=icpc cmake .. -DCMAKE_BUILD_TYPE=Release
#    - make --jobs=2 || make VERBOSE=1
#    - ctest --parallel 2 --output-on-failure
#  needs: ["OLDG++SANICHECKCOV"]
#  retry:
#    max: 2
#    when:
#      - runner_system_failure
#      - stuck_or_timeout_failure

NVHPC-2022:
  stage: build
  script:
    - apt-get update && apt-get install --no-install-recommends -y --quiet ca-certificates
    - echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
    - apt-get update -y && apt-get install --no-install-recommends -y nvhpc-22-7 cmake make libboost-test-dev libboost-serialization-dev
    - /opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ --version
    - mkdir build && cd build
    - CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/2022/compilers/bin/nvc++ cmake ..
    - make --jobs 2 || make VERBOSE=1
    - ctest --output-on-failure
  needs: ["OLDG++SANICHECKCOV"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

NVCC:
  stage: build
  image: nvidia/cuda:11.8.0-devel-ubuntu22.04
  script:
    - apt-get update && apt-get install --no-install-recommends -y cmake wget pkg-config make libboost-test-dev libboost-serialization-dev libboost-timer-dev libblas-dev libfftw3-dev
    - mkdir build && cd build
    - nvcc --version
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CUDA=1 -DCMAKE_CUDA_ARCHITECTURES=61
    - make --jobs=2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["OLDG++SANICHECKCOV"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

CIRCLE:
  allow_failure: false
  image: debian:testing
  stage: build
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-11 gzip libboost-test-dev libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest && cd build_latest
    - wget https://www.circle-lang.org/linux/build_latest.tgz --no-verbose
    - tar -zxvf build_latest.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CIRCLE=1 -DCMAKE_CXX_FLAGS="-nostdinc -I/usr/include/c++/11 -I/usr/include/x86_64-linux-gnu/c++/11 -I/usr/lib/gcc/x86_64-linux-gnu/11/include" -DBoost_USE_STATIC_LIBS=OFF -DBOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu/
    - cmake . --build --parallel=2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["OLDCLANG++12TIDYSANI"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

NVCC-GPU:
  stage: build
  tags:
    - intel_compiler
  script:
    - mkdir build && cd build
    - /usr/local/cuda/bin/nvcc --version
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_ARCHITECTURES=70 -DCMAKE_CUDA_FLAGS="-ccbin=g++-9" -DCMAKE_CXX_STANDARD=17
    - make -j8 -output-sync=recurse
    - ctest --output-on-failure --timeout 600
    - ../build/include/multi/adaptors/thrust/test/speed.cu.x
    - ../build/include/multi/adaptors/thrust/test/speed_algo.cu.x
    - ../build/include/multi/adaptors/fftw/test/combinations.cpp.x
  needs: ["NVCC"]

INQ-NVCC-OMPI-GPU:
  stage: test
  tags:
    - intel_compiler
  script:
    - export PREFIX=`mktemp -d`
    - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
    - cd inq
    - cd external_libs/multi
    - git checkout $CI_COMMIT_BRANCH
    - cd ../..
    - mkdir build && cd build
    - CUDACXX=/usr/local/cuda/bin/nvcc ../configure --prefix=$PREFIX --enable-cuda --disable-debug --pass-thru -DCMAKE_CUDA_ARCHITECTURES=70 `#--with-cuda-prefix=/usr/local/cuda`
    - make -j16 -output-sync=recurse VERBOSE=0 || make VERBOSE=1
    - make -j4  install
    - ctest -j2 --output-on-failure --timeout 600
    - cd src; INQ_EXEC_ENV="mpirun --oversubscribe -np 4" ctest --output-on-failure --timeout 600; cd ..
    - rm -rf $PREFIX
  needs: ["NVCC-GPU"]

QMCPACK-G++:
  image: debian:testing
  stage: test
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y ca-certificates cmake g++ git gfortran libblas-dev libboost-serialization-dev libfftw3-dev libhdf5-dev liblapack-dev libopenmpi-dev make numdiff pkg-config python3 python3-h5py python3-numpy python3-mpi4py python3-scipy libxml2-dev
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH || git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd build
    - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
    - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
  needs: ["OLDG++SANICHECKCOV"]
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

QMCPACK-CUDA:
  stage: test
  tags:
    - intel_compiler
  script:
    - git clone https://github.com/QMCPACK/qmcpack.git
    - cd qmcpack
    - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
    - git rm -r external_codes/boost_multi/multi && git commit -m "remove multi subtree"
    - git subtree add --squash -P external_codes/boost_multi/multi $CI_REPOSITORY_URL $CI_COMMIT_BRANCH # e.g. https://gitlab.com/correaa/boost-multi.git
    - cd build
    - CUDACXX=/usr/local/cuda/bin/nvcc cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_HOST_COMPILER=g++-9 -DCMAKE_CXX_FLAGS="-Wno-deprecated -Wno-deprecated-declarations" ..
    - make -j16 ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
    - ctest -R ppconvert --output-on-failure
    - ctest -R afqmc     --output-on-failure
  needs: ["QMCPACK-G++","NVCC-GPU"]

