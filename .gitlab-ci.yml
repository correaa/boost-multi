# # Copyright 2020-2025 Alfredo A. Correa

image: debian:stable
# image: npneq/debian_inq_deps:bookworm

workflow:
  auto_cancel:
    on_new_commit: interruptible
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# https://stackoverflow.com/a/78636529/225186 

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CODECOV_TOKEN: "999feb5b-a599-4d02-b9c5-46d977247f3a"
  RT_VERSION: "0.1"
  NVIDIA_DISABLE_REQUIRE: 1  # disable nvidia driver check
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

g++:  # debian-stable: default is gcc 12.2.0 as of April 2024
  stage: build
  interruptible: false
  tags:
    - non-shared
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-timer-dev libboost-serialization-dev libblas-dev liblapack-dev libfftw3-dev pkg-config
    - g++ --version
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure -T Test

g++-m32 sanitize:
  stage: build
  image: debian:latest
  tags:
    - non-shared
    - high-bandwidth  # for boost source download
    - x86_64  # for g++-multilib in image
  interruptible: true
  script:
    - dpkg --add-architecture i386
    - apt-get -qq update
    - apt-get -qq install --no-install-recommends -y --quiet ca-certificates g++ g++-multilib cmake libboost-serialization-dev:i386 make tar wget
    - mkdir build && cd build
    - c++ --version
    - cmake .. -DCMAKE_CXX_FLAGS="-m32 -fsanitize=address -D_GLIBCXX_SANITIZE_VECTOR" -DCMAKE_BUILD_TYPE=Debug
    - cmake --build .
    - ctest -j 1 --output-on-failure
  needs: ["g++"]

g++ cppcheck cpplint memcheck:  # debian-stable: gcc 12 as of Dec 2023
  stage: build
  allow_failure: false
  interruptible: true
  tags:
    - non-shared
    - docker
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake cppcheck cpplint g++ make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev liblapack-dev libmpich-dev pkg-config valgrind
    - g++ --version
    - cpplint --version
    - cppcheck --version
    - valgrind --version
    - mkdir build && cd build
    - export VALGRIND_EXE="valgrind --trace-children=yes --leak-check=full --track-origins=yes --show-leak-kinds=all --suppressions=.valgrind-suppressions --gen-suppressions=all --error-exitcode=1 "
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CPPLINT="cpplint;--quiet" -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--inline-suppr;--std=c++17;--check-config;--error-exitcode=1"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - ctest -j 2 --output-on-failure -T memcheck || ctest --verbose --output-on-failure --rerun-failed -T memcheck
  needs: ["g++"]

# clang++ sanitizer:
#   stage: build
#   tags:
#     - non-shared
#     - docker
#   # image: debian:testing
#   allow_failure: true
#   interruptible: true
#   script:
#     - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake clang make libasan8 libasan6 libclang-rt-dev libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
#     - mkdir build && cd build
#     - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer"  # ,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-omit-frame-pointer -fno-sanitize-recover=all"
#     - cmake --build . --parallel 2 || cmake --build . --verbose
#     - ctest -j 2 --output-on-failure -T Test
#   needs: ["clang++"]

# g++ sanitizer:
#   stage: build
#   # image: debian:testing
#   tags:
#     - non-shared
#     - docker
#   interruptible: true
#   script:
#     - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
#     - mkdir build && cd build
#     - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined,pointer-compare,pointer-subtract,float-divide-by-zero -fno-sanitize-recover=all"
#     - cmake --build . --parallel 2 || cmake --build . --verbose
#     - ctest -j 2 --output-on-failure -T Test
#   needs: ["g++"]

g++-7:
  stage: build
  image: debian:oldoldstable  # default is gcc 8 as of Dec 2023
  tags:
    - non-shared
    - docker
  interruptible: true
  script:
    - arch
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++-7 make libboost-serialization-dev libblas-dev libfftw3-dev libopenmpi-dev pkg-config wget
    - wget https://github.com/Kitware/CMake/releases/download/v3.27.0-rc3/cmake-3.27.0-rc3-linux-`arch`.sh --no-verbose
    - sh ./cmake-*.sh --skip-license --prefix=/usr
    - cmake --version
    - g++-7 --version
    - mkdir build && cd build
    - CXX=g++-7 cmake .. -DCMAKE_BUILD_TYPE=Debug -DDISABLE_MPI=ON
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["g++"]

g++-unstable c++23 par:  # debian-testing: default is gcc 14.2.0 as of Sep 2022
  stage: build
  image: debian:unstable
  tags:
    - non-shared
    - docker
  allow_failure: true
  interruptible: true
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++ pkg-config cmake make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev libopenmpi-dev libtbb-dev
    - mkdir build && cd build
    - g++ --version
    - CXX=g++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=23 -DCMAKE_CXX_FLAGS="-fimplicit-constexpr"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 ctest --output-on-failure
  needs: ["g++-testing c++20"]

clang++:
  stage: build
  tags:
    - non-shared
  interruptible: false
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang cmake make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev liblapack-dev pkg-config
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1"
    - cmake --build . --parallel 2 || cmake --build . --parallel 1 --verbose
    - ctest -j 2 --output-on-failure

clang++-16 mull-16:  # mull-17 crashes
  image: ubuntu:24.04
  stage: build
  tags:
    - x86_64  # for mull
    - non-shared
  interruptible: true
  allow_failure: false
  script:
    - apt-get -qq update
    - apt-get -qq install --no-install-recommends -y --quiet gnupg curl wget ca-certificates clang-16 cmake libclang-rt-16-dev make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev liblapack-dev pkg-config
    - curl -1sLf 'https://dl.cloudsmith.io/public/mull-project/mull-stable/setup.deb.sh' | bash
    - clang++-16 --version
    - apt-get -qq update
    - apt search mull
    - apt-get -qq install --no-install-recommends -y --quiet mull-16 libclang-cpp16
    - mkdir build && cd build
    - mull-runner-16 --version
    - CXX=clang++-16 cmake .. -DCMAKE_CXX_FLAGS="-O1 -fpass-plugin=/usr/lib/mull-ir-frontend-16 -g -grecord-command-line -fprofile-instr-generate -fcoverage-mapping"
    - cmake --build . --parallel 2 || cmake --build . --parallel 1 --verbose
    - ctest -j 2 --output-on-failure
    - cd test
    - ls *.x | xargs -n 1 sh -c 'echo $0 && ((mull-runner-16 --ld-search-path=/usr/lib/x86_64-linux-gnu $0 -test-program=ctest -- -j2 --stop-on-failure) || exit 255)'
  needs: ["clang++"]

# deb:
#   stage: build
#   script:
#     - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates cmake g++ make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config
#     - mkdir build && cd build
#     - cmake .. -DCMAKE_BUILD_TYPE=Release
#     - cmake --build . --parallel 2 || cmake --build . --verbose
#     - ctest -j 2 --output-on-failure
#     - cpack -G DEB
#     - ls -all
#     - dpkg -i multi_all.deb
#     - ls -all /usr/include/multi
#     - c++ ../test/main.cpp
#   artifacts:
#     paths:
#       - build/multi_all.deb
#   needs: ["g++", "clang++"]

clang++-latest libc++:
  stage: build
  image: debian:latest
  tags:
    - non-shared
    - docker
    - high-bandwidth
  interruptible: true
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake make libboost-timer-dev libboost-serialization-dev libblas-dev libc++-dev libc++abi-dev libfftw3-dev liblapack-dev pkg-config tar wget
    # - wget https://downloads.sourceforge.net/project/boost/boost/1.72.0/boost_1_72_0.tar.gz --no-verbose  # 1.70 doesn't install boost timer well
    # - tar -xf boost_1_72_0.tar.gz 
    # - cd boost_1_72_0
    # - ./bootstrap.sh --with-toolset=clang
    # - ./b2 toolset=clang cxxflags=-stdlib=libc++ linkflags=-stdlib=libc++ --with-serialization --with-timer install -j4 # libc++ only works with boost test compiled with libc++
    # - cd ..
    - mkdir build && cd build
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-stdlib=libc++ -DBOOST_NO_CXX98_FUNCTION_BASE -D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
    - cmake --build .
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

# - name: Install vcpkg
#   run: |
#       git clone https://github.com/microsoft/vcpkg.git
#       .\vcpkg\bootstrap-vcpkg.bat

# - name: Install Boost
#   run: .\vcpkg\vcpkg install boost-multi-array boost-timer boost-serialization

# - name: Set up Boost environment variables
#   run: |
#     echo "BOOST_ROOT=$(Get-Location)\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
#     echo "BOOST_INCLUDEDIR=$(Get-Location)\vcpkg\installed\x64-windows\include" >> $env:GITHUB_ENV
#     echo "BOOST_LIBRARYDIR=$(Get-Location)\vcpkg\installed\x64-windows\lib" >> $env:GITHUB_ENV
#     echo "PATH=$(Get-Location)\vcpkg\installed\x64-windows\bin;$env:PATH" >> $env:GITHUB_ENV

# - name: Configure CMake
#   run: cmake -S . -B build -A x64 -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake -DBOOST_ROOT=.\vcpkg\installed\x64-windows

vs2019-windows:
  stage: build
  only:
    refs:
      - master
  allow_failure: true
  interruptible: true
  variables:
    BOOST_ROOT: ${CI_PROJECT_DIR}/vcpkg/installed/x64-windows
    # BOOST_INCLUDEDIR: ${CI_PROJECT_DIR}/vcpkg/installed/x64-windows/include
    # BOOST_LIBRARYDIR: ${CI_PROJECT_DIR}/vcpkg/installed/x64-windows/lib
  script:
    - choco --version
    - choco install -y visualstudio2019community poshgit
    - git clone --depth=1 https://github.com/microsoft/vcpkg.git
    - .\vcpkg\bootstrap-vcpkg.bat
    - .\vcpkg\vcpkg install boost-multi-array boost-timer
    - mkdir build
    - cmake --version
    - cmake -S . -B build -DCMAKE_CXX_STANDARD=23
    - cmake --build build --config Release --parallel 2 --verbose
    - $env:Path += ";${CI_PROJECT_DIR}/vcpkg/installed/x64-windows/bin"
    - ctest --test-dir build --output-on-failure -C Release
  tags:
    - saas-windows-medium-amd64
  needs: ["clang++", "g++"]
  timeout: 30 minutes

# vs2022-windows:
#   stage: build
#   allow_failure: true
#   script:
#     # - choco --version
#     # - choco upgrade -y chocolatey
#     - choco --version
#     - choco install -y visualstudio2022community
#     - choco install -y boost-msvc-14.2 --version 1.74.0  # --params "/StaticBuild"
#     - mkdir build
#     - cmake --version
#     - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -A x64  # -DBOOST_ROOT="C:\local\boost_1_74_0" -DBOOST_LIBRARYDIR="C:\local\boost_1_74_0\lib64-msvc-14.2"  # c:/local/boost_1_74_0/lib64-msvc-14.2
#     - cmake --build build --config Release
#     - $env:Path += ';C:\local\boost_1_74_0\lib64-msvc-14.2'  # C:\local\boost_1_74_0;  ;C:\Program Files\CMake\bin
#     - ctest --test-dir build --output-on-failure -C Release
#   tags:
#     - saas-windows-medium-amd64
#   timeout: 30  # minutes
#   # rules:
#   #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#   needs: ["vs2019-windows"]

# vs2017-windows:
#   stage: build
#   allow_failure: true
#   script:
#     - choco --version
#     - choco install -y visualstudio2017community
#     - choco install -y boost-msvc-14.2 --version 1.74.0  # --params "/StaticBuild"
#     - mkdir build
#     - cmake --version
#     - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -A x64  # -DBOOST_ROOT="C:\local\boost_1_74_0" -DBOOST_LIBRARYDIR="C:\local\boost_1_74_0\lib64-msvc-14.2"  # c:/local/boost_1_74_0/lib64-msvc-14.2
#     - cmake --build build --config Release
#     - $env:Path += ';C:\local\boost_1_74_0\lib64-msvc-14.2'  # C:\local\boost_1_74_0;  ;C:\Program Files\CMake\bin
#     - ctest --test-dir build --output-on-failure -C Release
#   tags:
#     - saas-windows-medium-amd64
#   # rules:
#   #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#   needs: ["vs2019-windows"]

# clang++-macos:
#   interruptible: true
#   stage: build
# # image: macos-14-xcode-15
# # variables:
# #   HOMEBREW_NO_AUTO_UPDATE: 1
#   tags:
#     - shared-macos-amd64
#     # - saas-macos-medium-m1
#     # - saas-macos-large-m2pro 
#   allow_failure: true
#   script:
#     #- apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake make libblas-dev libc++-dev libc++abi-dev libfftw3-dev pkg-config tar wget
#     #- wget https://downloads.sourceforge.net/project/boost/boost/1.72.0/boost_1_72_0.tar.gz --no-verbose # 1.70 doesn't install boost timer well, there is no version 1.72 in sourceforge
#     #- tar -xf boost_1_72_0.tar.gz 
#     #- cd boost_1_72_0
#     #- ./bootstrap.sh --with-toolset=clang
#     #- ./b2 toolset=clang cxxflags=-stdlib=libc++ linkflags=-stdlib=libc++ --with-serialization --with-test --with-timer install -j4 # libc++ only works with boost test compiled with libc++
#     #- cd ..
#     - mkdir build && cd build
#     - c++ --version
#     - CXX=c++ cmake .. -DCMAKE_BUILD_TYPE=Debug  # -DCMAKE_CXX_FLAGS="-stdlib=libc++ -DBOOST_NO_CXX98_FUNCTION_BASE -D_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR -D_LIBCPP_ENABLE_DEBUG_MODE=1 -D_LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY=1 -D_LIBCPP_DEBUG_STRICT_WEAK_ORDERING_CHECK=1"
#     - cmake --build .
#     - ctest -j 2 --output-on-failure
#   needs: ["clang++"]

clang++-m32:
  stage: build
  image: debian:latest
  tags:
    - non-shared
    - high-bandwidth  # for boost source download
    - x86_64  # for g++-multilib in image
  interruptible: true
  script:
    - dpkg --add-architecture i386
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang g++ g++-multilib git cmake make libboost-serialization-dev:i386 tar wget
    - mkdir build && cd build
    - c++ --version
    - CXX=clang++ cmake .. -DCMAKE_CXX_FLAGS="-m32" -DCMAKE_BUILD_TYPE=Debug
    - cmake --build .
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

clang++-latest tidy iwyu:
  stage: build
  image: debian:latest  # clang 18 as of Apr 2024
  tags:
    - non-shared
    - docker
  interruptible: true
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet clang clang-tidy cmake iwyu make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev liblapack-dev pkg-config
    - mkdir build && cd build
    - clang++ --version
    - clang-tidy --version
    - iwyu --version
    - CXX=clang++ cmake .. -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="iwyu;-Xiwyu;--mapping_file=$PWD/../.iwyu-test.imp;-Xiwyu;--no_fwd_decls;-Xiwyu;--error"
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

g++-testing c++20:
  stage: build
  image: debian:testing
  tags:
    - non-shared
    - docker
  interruptible: true
  script:
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet g++ pkg-config cmake make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev
    - mkdir build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_FLAGS=-fimplicit-constexpr
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["g++"]

clang++-17-unstable libc++ c++23 boost_1_84:
  stage: build
  image: debian:unstable  # clang 17 as of March 2024
  tags:
    - non-shared
    - docker
    - high-bandwidth
  interruptible: true
  script:  # clang 17 doesn't work with gcc 13 libstd
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang clang-17 cmake make libblas-dev libc++-17-dev libc++abi-17-dev libfftw3-dev pkg-config tar wget
    - wget https://downloads.sourceforge.net/project/boost/boost/1.84.0/boost_1_84_0.tar.gz --no-verbose
    - tar -xf boost_1_84_0.tar.gz 
    - cd boost_1_84_0
    - ./bootstrap.sh --with-toolset=clang
    - ./b2 toolset=clang cxxflags=-stdlib=libc++ linkflags=-stdlib=libc++ --with-serialization --with-test --with-timer install -j4 # libc++ only works with boost test compiled with libc++
    - cd ..
    - mkdir build && cd build
    - CXX=clang++-17 cmake .. -DCMAKE_BUILD_TYPE=Debug -DBOOST_MULTI_STANDALONE=1 -DBUILD_TESTING=0 -DCMAKE_CXX_STANDARD=23 -DCMAKE_CXX_FLAGS="-stdlib=libc++ -D_LIBCPP_ENABLE_DEBUG_MODE=1 -D_LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY=1 -D_LIBCPP_DEBUG_STRICT_WEAK_ORDERING_CHECK=1"  # -DBoost_INCLUDE_DIR=../boost_1_84_0 -DBoost_LIBRARY_DIR=../boost_1_84_0/stage/lib -DBoost_NO_SYSTEM_PATHS=ON
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest --output-on-failure
  needs: ["clang++-latest libc++", "g++-testing c++20"]

clang++-oldoldstable:
  stage: build
  image: debian:oldoldstable  # clang 7.0.1 as of April 2024
  tags:
    - non-shared
    - docker
  interruptible: true
  script:
    - arch
    - apt-get -qq update && apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake make libboost-timer-dev libboost-serialization-dev libblas-dev libfftw3-dev pkg-config wget
    - wget --no-verbose -O cmake-install.sh https://github.com/Kitware/CMake/releases/download/v3.30.0-rc4/cmake-3.30.0-rc4-linux-`arch`.sh  # https://cmake.org/files/v3.18/cmake-3.18.0-rc1-Linux-`arch`.sh --no-verbose
    - sh cmake-install.sh --skip-license --prefix=/usr
    - mkdir build && cd build 
    - clang++ --version
    - CXX=clang++ cmake .. -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --parallel 2 || cmake --build . --verbose
    - ctest -j 2 --output-on-failure
  needs: ["clang++"]

circle:
  stage: build
  allow_failure: true
  tags:
    - non-shared
    - x86_64  # for circle executable
  script:
    - apt-get -qq update
    - apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-11 gzip libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest ; cd build_latest
    - wget https://www.circle-lang.org/linux/build_202.tgz --no-verbose
    - tar -zxvf build_*.tgz
    - cd ..
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DENABLE_CIRCLE=1
    - cmake --build . --parallel 4 || make VERBOSE=1
    - ctest -j 2 --output-on-failure

circle-latest c++20:
  stage: build
  allow_failure: true
  tags:
    - non-shared
    - x86_64  # for circle executable
  interruptible: true
  script:
    - apt-get -qq update
    - apt-get -qq install --no-install-recommends -y --quiet ca-certificates clang cmake g++-12 gzip libboost-timer-dev libboost-serialization-dev libblas-dev libelf1 libfftw3-dev make pkg-config tar wget
    - mkdir -p build_latest ; cd build_latest
    - wget https://www.circle-lang.org/linux/build_latest.tgz --no-verbose
    - tar -zxvf build_*.tgz
    - cd ..
    - ls
    - ./build_latest/circle --version
    - mkdir build && cd build
    - CXX=`pwd`/../build_latest/circle cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_CXX_STANDARD=20 -DENABLE_CIRCLE=1
    - cmake --build . --parallel 2 || make VERBOSE=1
    - ctest -j 2 --output-on-failure
  needs: ["circle"]

# sonar cloud
# from instructions
# another example here: https://github.com/sonarsource-cfamily-examples/linux-cmake-gitlab-ci-sc/blob/main/.gitlab-ci.yml

# get-sonar-binaries:
#   stage: .pre
#   cache:
#     policy: push
#     key: "${CI_COMMIT_SHORT_SHA}"
#     paths:
#       - build-wrapper/
#       - sonar-scanner/
#   script:
#     - apt-get -qq update && apt-get -qq install curl unzip
#     # Download sonar-scanner
#     - curl -sSLo ./sonar-scanner.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip'
#     - unzip -o sonar-scanner.zip
#     - mv sonar-scanner-5.0.1.3006-linux sonar-scanner
#     # Download build-wrapper
#     - curl -sSLo ./build-wrapper-linux-x86.zip "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip"
#     - unzip -oj build-wrapper-linux-x86.zip -d ./build-wrapper
#   only:
#     - merge_requests
#     - master
#     - develop
