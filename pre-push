#!/bin/bash
# sudo dpkg --add-architecture i386
# sudo apt install ccache clang clang-tidy cmake cppcheck g++ git iwyu lcov libblas-dev pkg-config libfftw3-dev libboost-test-dev libboost-timer-dev libopenblas-dev libtbb-dev make ninja-build valgrind libboost-test-dev:i386 libboost-timer-dev:i386
# sudo dnf install boost-devel blas-devel ccache clang clang-tools-extra cmake cppcheck fftw-devel git lcov libasan liblas-devel libubsan ninja-build valgrind
# install circle # mkdir -p $HOME/bin && wget https://www.circle-lang.org/linux/build_latest.tgz -P $HOME/tmp/ && tar zxvf $HOME/tmp/build_latest.tgz --directory $HOME/bin/ && $HOME/bin/circle --version
# install nvc++
#   on Ubuntu:
#     curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
#     echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
#     sudo apt-get update -y
#     sudo apt-get install -y nvhpc-24-7
#   on Fedora:
#   sudo yum-config-manager --add-repo https://developer.download.nvidia.com/hpc-sdk/rhel/nvhpc.repo && sudo yum install -y nvhpc-cuda-multi-24.5
# install oneAPI
#  wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
#  echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
#  sudo apt update
#  sudo apt install intel-hpckit

set -x  # echo on

export CMAKE_GENERATOR=Ninja

export CMAKE_CUDA_COMPILER_LAUNCHER="ccache"
export CMAKE_CXX_COMPILER_LAUNCHER="ccache"
export CMAKE_COMPILE_WARNING_AS_ERROR="ON"

if [ -z "$1" ]; then
echo "no arg"
else
CMT="--target $1"
CTR="--verbose -R $1"
fi

if [[ $(uname -m) != 'arm64' ]]; then

export PMIX_MCA_gds=hash
export UBSAN_OPTIONS=print_stacktrack=1

 (CXX=clang++                       cmake -S . -B .build.clang++-rel    -DCMAKE_BUILD_TYPE=Release                                                          && cmake --build .build.clang++-rel    $CMT && (ctest --test-dir .build.clang++-rel    --parallel 8 $CTR || ctest --test-dir .build.clang++-rel    --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=clang++ CXXFLAGS=-Weverything cmake -S . -B .build.clang++        -DCMAKE_BUILD_TYPE=Debug                                                            && cmake --build .build.clang++        $CMT && (ctest --test-dir .build.clang++        --parallel 8 $CTR || ctest --test-dir .build.clang++        --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=g++                           cmake -S . -B .build.g++            -DCMAKE_BUILD_TYPE=Debug                                                            && cmake --build .build.g++            $CMT && (ctest --test-dir .build.g++            --parallel 8 $CTR || ctest --test-dir .build.g++            --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=clang++                       cmake -S . -B .build.clang++        -DCMAKE_BUILD_TYPE=Debug                                                            && cmake --build .build.clang++        $CMT && (ctest --test-dir .build.clang++        --parallel 8 $CTR || ctest --test-dir .build.clang++        --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=clang++                       cmake -S . -B .build.clang++.libcpp -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_FLAGS="-stdlib=libc++" && cmake --build .build.clang++.libcpp $CMT && (ctest --test-dir .build.clang++.libcpp --parallel 8 $CTR || ctest --test-dir .build.clang++.libcpp --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=g++                           cmake -S . -B .build.g++-rel        -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=TRUE                                                         && cmake --build .build.g++-rel        $CMT && (ctest --test-dir .build.g++-rel        --parallel 8 $CTR || ctest --test-dir .build.g++-rel        --rerun-failed --output-on-failure $CTR) ) || exit 666

if [[ $(uname -m) != 'aarch64' ]]; then
 clang-format-19 --dry-run -Werror include/**/*.hpp test/*.cpp

 (CXX="$HOME/bin/circle" cmake -S . -B .build.circle     -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20 -DDISABLE_MPI=1 -DCMAKE_CXX_EXTENSIONS=OFF -DENABLE_CIRCLE=1 -DCMAKE_THREAD_LIBS_INIT="-lpthread"                                                                                          && cmake --build .build.circle     $CMT && (ctest --test-dir .build.circle --parallel 8 $CTR || ctest --test-dir .build.circle --rerun-failed --output-on-failure $CTR)) || exit 666
 (                       cmake -S . -B .build.nvcc.relax -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=nvcc -DCMAKE_CUDA_FLAGS="--expt-relaxed-constexpr --threads 2" -DCMAKE_CUDA_HOST_COMPILER=g++ -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CUDA_ARCHITECTURES=75 && cmake --build .build.nvcc.relax $CMT && (ctest --test-dir .build.nvcc.relax   `#--parallel 8` $CTR || ctest --test-dir .build.nvcc.relax   --rerun-failed --output-on-failure $CTR)) || exit 666
 (                       cmake -S . -B .build.nvcc       -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=20 -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=nvcc -DCMAKE_CUDA_FLAGS="--threads 2" -DCMAKE_CUDA_HOST_COMPILER=g++ -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CUDA_ARCHITECTURES=75                          && cmake --build .build.nvcc       $CMT && (ctest --test-dir .build.nvcc   --parallel 8 $CTR || ctest --test-dir .build.nvcc   --rerun-failed --output-on-failure $CTR)) || exit 666
#(source /opt/intel/oneapi/setvars.sh && CXX=/opt/intel/oneapi/compiler/latest/bin/icpx cmake -S . -B .build.icpx  -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20                                                                                                                                && cmake --build .build.icpx       $CMT && (ctest --test-dir .build.icpx   --parallel 8 $CTR || ctest --test-dir .build.icpx   --rerun-failed --output-on-failure $CTR)) || exit 666
 (CXX=/opt/nvidia/hpc_sdk/Linux_x86_64/2024/compilers/bin/nvc++ cmake -S . -B .build.nvc++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DBLA_PREFER_PKGCONFIG=ON -DCMAKE_CXX_COMPILER=/opt/nvidia/hpc_sdk/Linux_x86_64/2024/compilers/bin/nvc++                                               && cmake --build .build.nvc++  $CMT && (ctest --test-dir .build.nvc++  --parallel 8 $CTR || ctest --test-dir .build.nvc++  --rerun-failed --output-on-failure $CTR)) || exit 666
#(                       cmake -S . -B .build.culang       -DCMAKE_BUILD_TYPE=Release -DENABLE_CUDA=1 -DCMAKE_CUDA_COMPILER=clang++ -DCMAKE_CUDA_HOST_COMPILER=clang++ -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CUDA_ARCHITECTURES=75                                                                    && cmake --build .build.culang $CMT && (ctest --test-dir .build.culang --parallel 8 $CTR || ctest --test-dir .build.culang --rerun-failed --output-on-failure $CTR)) || exit 666
fi

 (CXX=g++     cmake -S . -B .build.g++.plus     -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=23 -DDISABLE_MPI=1 -DBLA_VENDOR=OpenBLAS `#-DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--inline-suppr;--std=c++17;--checkers-report=cppcheck.report;--error-exitcode=1"` -DCMAKE_CXX_FLAGS="-D_GLIBCXX_DEBUG=1" -DCMAKE_CXX_FLAGS="-DRUNNING_ON_VALGRIND -fconcepts-diagnostics-depth=4 -fimplicit-constexpr -Wlto-type-mismatch -Wodr -fanalyzer -Wno-analyzer-null-dereference -Wno-analyzer-possible-null-dereference -Wno-analyzer-malloc-leak -Wno-analyzer-use-of-uninitialized-value -Wno-analyzer-use-after-free" && cmake --build .build.g++.plus     $CMT && (PMIX_MCA_gds=hash ctest --test-dir .build.g++.plus     --parallel 8 --output-on-failure --rerun-failed --overwrite MemoryCheckCommandOptions=" --trace-children=yes --leak-check=full --track-origins=yes --show-leak-kinds=all --gen-suppressions=all --error-exitcode=1" --overwrite MemoryCheckSuppressionFile=$PWD/.valgrind-suppressions -T memcheck $CTR)                                                              ) || exit 666
 (CXX=clang++ cmake -S . -B .build.clang++.plus -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=20 -DBLA_VENDOR=Generic -DCMAKE_CXX_CLANG_TIDY="clang-tidy" -DCMAKE_CXX_FLAGS="-g -fsanitize=undefined -fno-sanitize-recover=undefined -DUBSAN=1" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=undefined" `#-DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="iwyu;-Xiwyu;--mapping_file=/home/correaa/boost-multi/.iwyu-test.imp;-Xiwyu;--no_fwd_decls"`                                                                                                                                                                                               && cmake --build .build.clang++.plus $CMT && (                  ctest --test-dir .build.clang++.plus --parallel 8                                                                                                                                                                                                                                                                                          $CTR  || ctest --parallel 1 -rerun-failed --output-on-failure $CTR)) || exit 666

## sudo setfacl --modify user:correaa:rw /var/run/docker.sock
# gitlab-runner exec docker rocm

else
# brew install boost ccache clang-tidy cmake cppcheck cpplint ninja llvm@19
# ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
# git clone thrust; cd thrust; mkdir build; cd build; cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME -DTHRUST_ENABLE_HEADER_TESTING=OFF -DTHRUST_ENABLE_TESTING=OFF -DTHRUST_ENABLE_EXAMPLES=OFF
export CMAKE_PREFIX_PATH=$HOME/lib/cmake/thrust
#export Thurst_DIR=/Users/correatedesco1/include/thrust/cmake
 (CXX=c++ CXXFLAGS="-fexperimental-library" cmake -S . -B .build.c++.std23 -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_STANDARD=23 `#-DCMAKE_EXPORT_COMPILE_COMMANDS=ON`                                                                                                                                                                 && cmake --build .build.c++.std23 $CMT &&                                           (ctest --test-dir .build.c++.std23 --parallel $CTR                      || ctest --test-dir .build.c++.std23 --rerun-failed --output-on-failure $CTR) ) || exit 666
 (CXX=c++                                   cmake -S . -B .build.c++.asan  -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_FLAGS="-D_LIBCPP_DEBUG=1 -fsanitize=undefined -fsanitize=pointer-overflow -fsanitize-trap=pointer-overflow -fsanitize=address -fno-omit-frame-pointer -fsanitize=signed-integer-overflow" && cmake --build .build.c++.asan  $CMT && ASAN_OPTIONS="new_delete_type_mismatch=1"  ctest --test-dir .build.c++.asan  --parallel $CTR --output-on-failure                                                                                ) || exit 666
 (CXX=c++                                   cmake -S . -B .build.c++.m32   -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_FLAGS="-m32"                                                                                                                                                                                                      && cmake --build .build.c++.m32   $CMT &&                                            ctest --test-dir .build.c++.m32   --parallel $CTR --output-on-failure                                                                                ) || exit 666
#(CXX=c++                                   cmake -S . -B .build.c++.tidy  -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_CLANG_TIDY=clang-tidy                                                                                                                                                                                             && cmake --build .build.c++.tidy  $CMT &&                                            ctest --test-dir .build.c++.tidy  --parallel $CTR --output-on-failure                                                                                ) || exit 666
 (CXX=c++                                   cmake -S . -B .build.c++.tidy  -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_CXX_CPPLINT="cpplint;--quiet" -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--suppress=missingIncludeSystem;--checkers-report=cppcheck.report;--suppress=checkersReport;--suppress=syntaxError;--suppress=unmatchedSuppression;--suppress=unusedFunction;--suppress=constParameterReference;--suppress=normalCheckLevelMaxBranches;--inline-suppr;--std=c++17;--error-exitcode=1" -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="include-what-you-use;-Xiwyu;--mapping_file=/Users/correatedesco1/boost-multi/.iwyu-test.imp;-Xiwyu;--no_fwd_decls;-Xiwyu;-Werror" && cmake --build .build.c++.tidy $CMT --verbose --parallel && (ctest --test-dir .build.c++.tidy -j 12 $CTR || ctest --test-dir .build.c++.tidy --rerun-failed --output-on-failure $CTR)) || exit 666
 (CXX=g++-15                                cmake -S . -B .build.g++-15    -DCMAKE_BUILD_TYPE=Release -DOpenMP_ROOT=/opt/homebrew/opt/libomp -DCMAKE_CXX_STANDARD=23                                                                                                                                                                                                       && cmake --build .build.g++-15    $CMT &&                                           (ctest --test-dir .build.g++-15    --parallel $CTR                      || ctest --rerun-failed --output-on-failure $CTR)                             ) || exit 666
 /opt/homebrew/Cellar/llvm@19/19.1.7/bin/clang-format --dry-run -Werror include/**/*.hpp test/*.cpp

#(mkdir -p .build.clang++.iwyu && cd .build.clang++.iwyu && CXX=clang++                     cmake .. -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="iwyu" && make -j 10 && ctest -j 12 --output-on-failure) || exit
# TODO(correaa) make cppcheck work for all the code
#(find . -name '*.hpp' -exec cppcheck --enable=all --inline-suppr --suppress=unmatchedSuppression:{} --suppress=syntaxError --suppress=missingInclude --suppress=missingIncludeSystem --suppress=preprocessorErrorDirective --suppress=syntaxError --suppress=unusedFunction --suppress=arithOperationsOnVoidPointer --suppress=sizeofDereferencedVoidPointer -D__align__ -DCUDARTAPI --language=c++ --std=c++17 --error-exitcode=666 --suppress=unmatchedSuppression {} \;) || exit
fi

#fuser --kill /dev/nvidia-uvm; while fuser --silent /dev/nvidia-uvm; do sleep 1; done; modprobe -r nvidia_uvm && modprobe nvidia_uvm
